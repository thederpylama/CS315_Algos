#1

procedure bubbleSort(A : list of sortable items)
    n := length(A)                                                  C[1] * 1
    repeat                                                          C[2] * n
        swapped := false                                            C[3] * 1
        for i := 1 to n-1 inclusive do                              C[4] + (sum(i=1, n-1, ti))
            { if this pair is out of order }
            if A[i-1] > A[i] then                                   C[5] + (sum(i=1, n-1, ti) - 1)
                { swap them and remember something changed }        C[6]
                swap(A[i-1], A[i])                                  C[7] * ?
                swapped := true                                     C[8] * ?
            end if
        end for
    until not swapped                                               C[9]?
end procedure

sum(i=1, n-1, ti) = n + (n - 1) + (n - 2) + (n - 3) + ... + 2
(n + (n - 1) + (n - 2) + (n - 3) + ... + 2) + 2 drop the constants
= n(n + 1)/2 = n^2 + n / 2 = theta(n^2)

#2

n^2 + 14 is O(n^2)

0 <= n^2 + 14 <= C * n^2
    / n^2       / n^2
    14/n^2 <= C
    n = 4 C = 1
    14/(4)^2
    = 0.875 < 1

#3

n^2 + 14 is Omega(n^2)

0 <= n^2 * C + 14C <= n^2
    / n^2              / n^2
    C + 14C/n^2 <= 1
    n = 4 C = 1
    1 + (14 * 1)/(4)^2
    = 0.9375 < 1

#4

Yes, because a function is defined as tightly bound by the function f(x) when its upper and lower bounds are also f(x).

#5

In this case "at least" means that in a best case scenario the algorithm has a running time of O(n^2).

#6

is 2^(n+1) O(2^n) ?

0 <= 2^(n+1) <= C * 2 ^ n
    lg(2^(n+1))       lg(C * 2 ^ n)
    n + 1 <= lg(C) + n
    -n             -n
    1 <= lg(C)
    C = 2
    lg(2)
    = 1 >= 1

#7

is 2^2n O(2^n) ?

0 <= 2^(2n) <= C * 2 ^ n
    lg(2^2n)         lg(C * 2^n)
    2n <= lg(C) + n
    -n             -n
    n <= lg(C)

No such constants exist

#8
             p        q           r
             13 51 62 36 48 67 19 59
       p  q     r              p  q     r
       13 51 62 36             48 67 19 59
    p  q        p  q        p  q        p  q
    13 51       62 36       48 67       19 59
pq        pq  pq      pq  pq      pq  pq      pq
13        51  62      36  48      67  19      59
    p  q        p  q        p  q        p  q
    13 51       36 62       48 67       19 59
       p  q     r              p  q     r
       13 36 51 62             19 48 59 67
             p        q           r
             13 19 36 48 51 59 62 67

#9

Lower and upper bounds of T(n) = T(n/20) + T(19n/20) + theta(n)

                                 T(n)                                 n                                                n
                                                          T(n/20)                 T(19n/20)             n/20                    19n/20
                                                                                               T(n/400)    T(19n/400)    T(19n/400)    T(361n/400)
Lower bound:
n/20^ht = 1
n = 20^ht
log20(n) = ht
n for other recurrences
= omega(n * lg(n)

Upper bound:
height of the right side of the tree= log19/20(n) = log2(n)
n to account for unevenness
= O(n * lg(n))

